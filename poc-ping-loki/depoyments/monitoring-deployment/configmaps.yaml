apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config
  namespace: observabilidad
data:
  local-config.yaml: |-
    auth_enabled: false

    server:
      http_listen_port: 3100
      grpc_listen_port: 9095

    common:
      instance_store: null
      path_prefix: /tmp/loki
      ring:
        instance_addr: 127.0.0.1
        kvstore:
          store: inmemory
      replication_factor: 1
      storage_config:
        filesystem:
          directory: /loki/data # Mount path for Loki data PVC

    query_range:
      # query_timeout: 5m
      # align_queries_with_step: true
      # max_chunks_per_query: 2e6
      # max_query_length: "5m"
      # split_queries_by_interval: "15m"

    schema_config:
      configs:
        - from: 2020-10-27
          store: filesystem
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h

    ruler:
      storage:
        type: local
        local:
          directory: /loki/rules # Mount path for Loki data PVC
      rule_path: /tmp/loki/rules-temp
      ring:
        kvstore:
          store: inmemory
      enable_api: true

    limits_config:
      enforce_metric_name: false
      reject_old_samples: true
      reject_old_samples_max_age: 168h

    chunk_store:
      max_look_back_period: 0s # Use with care

    table_manager:
      retention_deletes_enabled: false
      retention_period: 0s

    compactor:
      working_directory: /loki/compact # Mount path for Loki data PVC
      compaction_interval: 10m
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-config
  namespace: observabilidad
data:
  alloy-config.yaml: |-
    server:
      log_level: info

    logs:
      configs:
        - name: docker-logs
          clients:
            - url: http://loki:3100/loki/api/v1/push
          positions:
            filename: /tmp/positions.yaml
          scrape_configs:
            - job_name: docker-logs
              static_configs:
                - targets: []
                  labels:
                    job: docker-logs
                    __path__: /var/log/containers/*.log

              pipeline_stages:
                - regex:
                    expression: '/var/log/containers/(?P<compose_service>[^/]+)\.log$'
                    source: filename
                - labels:
                    compose_service:
              
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: observabilidad
data:
  prometheus.yml: |-
    global:
      scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
      evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
      # scrape_timeout is set to the global default (10s).

    # Alertmanager configuration
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              # - alertmanager:9093

    # Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
    rule_files:
      # - "first_rules.yml"
      # - "second_rules.yml"

    # A scrape configuration containing exactly one endpoint to scrape:
    # Here it's Prometheus itself.
    scrape_configs:
      # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
      - job_name: "prometheus"

        # metrics_path defaults to '/metrics'
        # scheme defaults to 'http'.

        static_configs:
          - targets: ["localhost:9090"]

      - job_name: 'user-service'

        # Override the global default and scrape targets from this job every 5 seconds.
        scrape_interval: 5s

        static_configs:
          - targets: ['user-service:3002']

      - job_name: 'transaction-service'

        # Override the global default and scrape targets from this job every 5 seconds.
        scrape_interval: 5s

        static_configs:
          - targets: ['transaction-service:3001']

      - job_name: 'app-c'

        # Override the global default and scrape targets from this job every 5 seconds.
        scrape_interval: 5s

        static_configs:
          - targets: ['app-c:8000']

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: observabilidad
data:
  datasources.yaml: |-
    # config file version
    apiVersion: 1

    # list of datasources that should be deleted from the database
    deleteDatasources:
      - name: Prometheus
        orgId: 1

    # list of datasources to insert/update depending
    # what's available in the database
    datasources:
      # <string, required> name of the datasource. Required
      - uid: prometheus
        orgId: 1
        name: Prometheus
        type: prometheus
        typeName: Prometheus
        access: proxy
        url: http://prometheus:9090
        password: ''
        user: ''
        database: ''
        basicAuth: false
        isDefault: true
        jsonData:
          exemplarTraceIdDestinations:
            - datasourceUid: tempo
              name: TraceID
          httpMethod: POST
        readOnly: false
        editable: true
      - uid: tempo
        orgId: 1
        name: Tempo
        type: tempo
        typeName: Tempo
        access: proxy
        url: http://tempo:4318 # Aseg√∫rate de que este puerto coincida con el servicio de Tempo
        password: ''
        user: ''
        database: ''
        basicAuth: false
        isDefault: false
        jsonData:
          nodeGraph:
            enabled: true
          search:
            hide: false
          lokiSearch:
            datasourceUid: loki
          tracesToLogs:
            datasourceUid: loki
            filterBySpanID: false
            filterByTraceID: true
            mapTagNamesEnabled: false
            tags:
              - compose_service
            spanStartTimeShift: '-1m'
            spanEndTimeShift: '1m'
        readOnly: false
        editable: true
      - uid: loki
        orgId: 1
        name: Loki
        type: loki
        typeName: Loki
        access: proxy
        url: http://loki:3100
        password: ''
        user: ''
        database: ''
        basicAuth: false
        isDefault: false
        jsonData:
          derivedFields:
            - datasourceUid: tempo
              matcherRegex: (?:trace_id)=(\w+)
              name: TraceID
              url: $${__value.raw}
        readOnly: false
        editable: true

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: observabilidad
data:
  dashboards.yaml: |-
    apiVersion: 1
    providers:
    - name: 'FastAPI Observability'
      orgId: 1
      folder: ''
      type: 'file'
      disableDeletion: true
      editable: true
      options:
        path: '/etc/grafana/dashboards'

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-definitions
  namespace: observabilidad
data:
  tu_dashboard.json: |-
    {
      "annotations": {
        "list": []
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "links": [],
      "panels": [],
      "schemaVersion": 38,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-6h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "30m",
          "1h",
          "3h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Ejemplo Dashboard",
      "uid": "ejemplo-dashboard",
      "version": 0
    }