# Deployment for Grafana Alloy (Agent)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-alloy
  namespace: observabilidad
  labels:
    app: grafana-alloy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana-alloy
  template:
    metadata:
      labels:
        app: grafana-alloy
    spec:
      containers:
      - name: agent
        image: grafana/agent:latest
        args:
        - -config.file=/etc/agent/agent.yaml
        volumeMounts:
        - name: alloy-config-volume
          mountPath: /etc/agent/agent.yaml
          subPath: alloy-config.yaml # Mount specific file from ConfigMap
        - name: shared-logs-volume
          mountPath: /var/log/containers # Mount the shared log volume
      volumes:
      - name: alloy-config-volume
        configMap:
          name: alloy-config
      - name: shared-logs-volume
        persistentVolumeClaim:
          claimName: shared-logs-pvc
---
# Deployment for Loki
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki
  namespace: observabilidad
  labels:
    app: loki
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki
  template:
    metadata:
      labels:
        app: loki
    spec:
      containers:
      - name: loki
        image: grafana/loki:3.0.0
        ports:
        - containerPort: 3100
          name: http-metrics
        - containerPort: 9095
          name: grpc
        args:
        - -config.file=/etc/loki/local-config.yaml
        volumeMounts:
        - name: loki-data-volume
          mountPath: /loki # Mount path specified in the dummy configmap
      volumes:
      - name: loki-data-volume
        persistentVolumeClaim:
          claimName: loki-data-pvc
---
# Deployment for Prometheus
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: observabilidad
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:v2.51.2
        ports:
        - containerPort: 9090
        args:
        - --config.file=/etc/prometheus/prometheus.yml # Standard Prometheus config path
        - --storage.tsdb.path=/prometheus # Standard Prometheus data path
        - --web.console.libraries=/usr/share/prometheus/console_libraries
        - --web.console.templates=/usr/share/prometheus/consoles
        - --enable-feature=exemplar-storage # Feature from compose command
        volumeMounts:
        - name: prometheus-config-volume
          mountPath: /etc/prometheus/prometheus.yml
          subPath: prometheus.yml # Mount specific file from ConfigMap
        - name: prometheus-data-volume
          mountPath: /prometheus # Mount path for Prometheus data
      volumes:
      - name: prometheus-config-volume
        configMap:
          name: prometheus-config # Refers to the prometheus-config ConfigMap
      - name: prometheus-data-volume
        persistentVolumeClaim:
          claimName: prometheus-data-pvc
---
# Deployment for Tempo
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tempo
  namespace: observabilidad
  labels:
    app: tempo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tempo
  template:
    metadata:
      labels:
        app: tempo
    spec:
      containers:
      - name: tempo
        image: grafana/tempo:2.4.1
        ports:
        - containerPort: 4317 # OTLP gRPC
          name: otlp-grpc
        - containerPort: 4318 # OTLP HTTP
          name: otlp-http
        - containerPort: 9411 # Zipkin
          name: zipkin
        - containerPort: 3200 # Tempo (HTTP/gRPC - config dependent)
          name: tempo-http
        args: # Replicate command from compose
        - '--target=all'
        - '--storage.trace.backend=local'
        - '--storage.trace.local.path=/var/tempo' # Mount path for Tempo data
        - '--auth.enabled=false' # As per compose
        volumeMounts:
        - name: tempo-data-volume
          mountPath: /var/tempo # Mount path for Tempo data
      volumes:
      - name: tempo-data-volume
        persistentVolumeClaim:
          claimName: tempo-data-pvc
---
# Deployment for Grafana
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: observabilidad
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.4.2
        ports:
        - containerPort: 3000
        volumeMounts:
        - name: grafana-datasources-volume
          mountPath: /etc/grafana/provisioning/datasources # Mount datasources config directory
        - name: grafana-dashboards-config-volume
          mountPath: /etc/grafana/provisioning/dashboards/dashboards.yaml
          subPath: dashboards.yaml # Mount specific file from ConfigMap
        - name: grafana-dashboard-files-volume
          mountPath: /etc/grafana/dashboards # Mount dashboard files directory
        - name: grafana-data-volume
          mountPath: /var/lib/grafana # Mount path for Grafana data
      volumes:
      - name: grafana-datasources-volume
        configMap:
          name: grafana-datasources # Refers to the grafana-datasources ConfigMap
      - name: grafana-dashboards-config-volume
        configMap:
          name: grafana-dashboards # Refers to the grafana-dashboards ConfigMap
      - name: grafana-dashboard-files-volume
        configMap:
          name: grafana-dashboard-files # Refers to the grafana-dashboard-files ConfigMap
      - name: grafana-data-volume
        persistentVolumeClaim:
          claimName: grafana-data-pvc